
if(@USE_COMPILER@)
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR "uname -m")

set(CMAKE_C_COMPILER @COMPILER@)
set(CMAKE_CXX_COMPILER @CPPCOMPILER@)
#set(CMAKE_CXX_LINK_EXECUTABLE @LINKER@)

set(CMAKE_C_FLAGS "-target @ARCH_NAME@ ${CMAKE_C_FLAGS} @C_FLAGS@")
set(CMAKE_C_COMPILER_TARGET "@ARCH_NAME@")

set(CMAKE_CXX_FLAGS "-target @ARCH_NAME@ ${CMAKE_CXX_FLAGS} @CXX_FLAGS@")
set(CMAKE_CXX_COMPILER_TARGET "@ARCH_NAME@")

# Ensure CMake doesn't fetch the local compiler to initialize the internals.
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

# In linux, when linking libraries to static libraries, it's necessary to make the libs Position Independent Code. Check: https://github.com/EpicGames/UnrealEngine/blob/40eea367040d50aadd9f030ed5909fc890c159c2/Engine/Source/ThirdParty/Alembic/BuildForLinux.sh#L82C1-L83C127
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Load the UE toolchain.
set(CMAKE_EXE_LINKER_FLAGS "@LINKER_FLAGS@ ${CMAKE_EXE_LINKER_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS "@LINKER_FLAGS@ ${CMAKE_MODULE_LINKER_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS "@LINKER_FLAGS@ ${CMAKE_SHARED_LINKER_FLAGS}")

set(ENV{CXX} @CPPCOMPILER@)
endif()
