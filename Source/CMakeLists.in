cmake_minimum_required(VERSION 3.10)

#using undocumented cmake functionality to force global on imported targets
function(add_library)
    set(_args ${ARGN})
    if ("${_args}" MATCHES ";IMPORTED")
        list(APPEND _args GLOBAL)
    endif()
    _add_library(${_args})
endfunction()

macro(_ue4_get_target_link_libraries addTarget target_file_list target_linker_file_list)
    foreach(target ${ARGN})
        if(TARGET ${target})
            get_target_property(target_libraries ${target} INTERFACE_LINK_LIBRARIES)

            get_target_property(target_type ${target} TYPE)

            if(@FORCE_RELEASE_RUNTIME@)
                if(NOT target_type STREQUAL "INTERFACE_LIBRARY")
                    set_property(TARGET ${target} PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreadedDLL")
                    get_target_property(isImported ${target} IMPORTED)
                    if(NOT isImported)
                        target_compile_options(${target} PRIVATE "/MD")
                    endif()
                endif()
            endif()
            
            if(target_libraries) 
                #get info for targets libs
                _ue4_get_target_link_libraries(TRUE ${target_file_list} ${target_linker_file_list} ${target_libraries})
            endif()

            if(${addTarget})
                if(target_type STREQUAL "SHARED_LIBRARY")
                    list(APPEND ${target_file_list} "\"$<TARGET_FILE:${target}>\"$<COMMA>")
                endif()
                if(target_type STREQUAL "STATIC_LIBRARY"
                    OR target_type STREQUAL "SHARED_LIBRARY")
                    list(APPEND ${target_linker_file_list} "$<TARGET_LINKER_FILE:${target}>")
                endif ()
            endif()
        else()
            #not a target, need to hunt for library to include
            #currently ignored, use targets instead of files
        endif()
    endforeach()

    if(${target_file_list})
        list(REMOVE_DUPLICATES ${target_file_list})
    endif()
    if(${target_linker_file_list})
        list(REMOVE_DUPLICATES ${target_linker_file_list})
    endif()
endmacro()

macro(ue4_get_target_link_libraries target_file_list target_linker_file_list)
    _ue4_get_target_link_libraries(TRUE ${target_file_list} ${target_linker_file_list} ${ARGN})
endmacro()

macro(target_build_info build_info target)
    list(APPEND ${build_info} "includes=$<JOIN:$<REMOVE_DUPLICATES:$<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>>,$<COMMA>>")

    list(APPEND target_file_dependencies "@BUILD_TARGET_DIR@/CMakeLists.txt")
    list(APPEND target_file_dependencies $<REMOVE_DUPLICATES:$<TARGET_PROPERTY:${target},CMAKE_CONFIGURE_DEPENDS>>)

    list(APPEND target_file_source_dependencies $<REMOVE_DUPLICATES:$<TARGET_PROPERTY:${target},SOURCES>>)
    
    ue4_get_target_link_libraries(target_binary_libs target_link_lib_files ${target})

    string(REPLACE ";" "$<SEMICOLON>" target_file_dependencies "${target_file_dependencies}")
    string(REPLACE ";" "$<SEMICOLON>" target_file_source_dependencies "${target_file_source_dependencies}")
    string(REPLACE ";" "$<SEMICOLON>" target_binary_libs "${target_binary_libs}")
    string(REPLACE ";" "$<SEMICOLON>" target_link_lib_files "${target_link_lib_files}")

    list(APPEND ${build_info} "dependencies=$<JOIN:${target_file_dependencies},$<COMMA>>")
    list(APPEND ${build_info} "sourcePath=$<TARGET_PROPERTY:${target},SOURCE_DIR>")
    list(APPEND ${build_info} "sourceDependencies=$<JOIN:${target_file_source_dependencies},$<COMMA>>")
    list(APPEND ${build_info} "binaries=$<JOIN:${target_binary_libs},$<COMMA>>")
    list(APPEND ${build_info} "libraries=$<JOIN:${target_link_lib_files},$<COMMA>>")
endmacro()

cmake_policy(SET CMP0091 NEW)

set(@BUILD_TARGET_NAME@_build_info "")

#if(@FORCE_RELEASE_RUNTIME@)
#    string(REPLACE "/MDd" "/MD" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
#    string(REPLACE "/MTd" "/MT" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
#endif()

add_subdirectory("@BUILD_TARGET_DIR@" "@BUILD_TARGET_NAME@")
target_build_info("@BUILD_TARGET_NAME@_build_info" @BUILD_TARGET_NAME@)

project(@BUILD_TARGET_NAME@_build)

string(REPLACE ";" "\n" @BUILD_TARGET_NAME@_build_info "${@BUILD_TARGET_NAME@_build_info}")
#message(STATUS "build_info=${@BUILD_TARGET_NAME@_build_info}")

file(GENERATE OUTPUT "@BUILD_TARGET_THIRDPARTY_DIR@/@BUILD_TARGET_NAME@/@BUILD_TARGET_BUILD_DIR@/buildinfo_$<CONFIG>.output" CONTENT "${@BUILD_TARGET_NAME@_build_info}")